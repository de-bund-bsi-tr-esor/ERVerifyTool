plugins {
    id 'distribution'
    id 'org.unbroken-dome.xjc'
}

// Define directories for generated source and filtered schema files
ext {
    buildSchemaDir = file("$project.buildDir/schema")
    schemaDir = file("$project.projectDir/src/main/resources")
    genSrcDir = file("$project.buildDir/gensrc")
}

sourceSets.main.java.srcDirs += genSrcDir

configurations {
    generate {}
    testing {}
}

xjc{
    xjcVersion="3.0"
}

dependencies {
    implementation ('org.apache.santuario:xmlsec:4.0.2') {
        exclude group: 'org.codehaus.woodstox'
        exclude group: 'org.slf4j'
    }
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.68'
    implementation 'org.json:json:20240303'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:3.0.2'
    implementation 'com.sun.xml.ws:jaxws-rt:3.0.2'
    implementation 'com.sun.org.apache.xml.internal:resolver:20050927'

    generate 'com.sun.xml.ws:jaxws-tools:3.0.2'
}

// Generate TR-ESOR web service classes
task genWSClasses(type: DefaultTask) {
    doFirst {
        mkdir(project.buildSchemaDir)
    }
    outputs.dir(project.genSrcDir)
    ant.taskdef( name: 'wsimport',
    classname: 'com.sun.tools.ws.ant.WsImport',
    classpath: project.configurations.generate.asPath)
    ant.setLifecycleLogLevel("ERROR")
    doLast {
        ant.wsimport(wsdl: "${project.schemaDir}/tr-esor-S-4-v1.3.wsdl", sourcedestdir: project.genSrcDir, xnocompile:'true', encoding:'UTF-8') {
            catalog = "${project.schemaDir}/catalog.xml"
            binding(file: "${project.schemaDir}/tr-esor-verification-report-v1.3.xsd")
            binding(file: "${project.schemaDir}/TS119102-2-v122.xsd")
            xjcarg(line: '-encoding UTF-8')
        }
        ant.wsimport(wsdl: "${project.schemaDir}/eCard.wsdl", sourcedestdir: project.genSrcDir, xnocompile:'true', encoding:'UTF-8') {
            catalog = "${project.schemaDir}/catalog.xml"
            xjcarg(line: '-encoding UTF-8')
        }
    }
}

// Generate configuration classes
xjcGenerate {
    source.from("${project.schemaDir}/Config.xsd")
}

compileJava.dependsOn xjcGenerate, genWSClasses

// Generate javadoc
javadoc {
    includes = [
        'de/bund/bsi/tr_esor/checktool/**'
    ]
    options.addBooleanOption('Xdoclint:html,reference,accessibility', true)
    failOnError = false
}

distributions {
    main {
        archivesBaseName = project.baseName
        contents {
            from (javadoc) { into 'apidocs' }
            from (configurations.runtimeClasspath) { into 'lib' }
            from (jar) { into 'lib' }
            from ('src/main/assembly') {
                expand('version': project.version)
            }
        }
    }
}

assemble.dependsOn javadoc, installDist

// Create additional jar with test classes for other sub-projects
task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

// Create additional jar with sources
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}



artifacts {
    testing testJar
    archives distZip
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId project.baseName
            artifact testJar
            artifact sourcesJar
            artifact distZip { classifier = 'bin' }
        }
    }
}
