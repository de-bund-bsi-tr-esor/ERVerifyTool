plugins {
    id 'application'
    id 'com.github.spotbugs' version '4.6.0'
    id 'pmd'
    id 'checkstyle'
    id 'org.unbroken-dome.xjc' version '2.0.0'
}

description = 'ER-Prüftool des BSI'

allprojects {
    group = 'de.bund.bsi.tr_esor'
    version = "${version}"
    repositories { mavenCentral() }
}

subprojects {
    ext.baseName = rootProject.name + '-' + project.name

    apply plugin: 'maven-publish'

    tasks.withType(AbstractArchiveTask){
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(Sync){
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    publishing {
        repositories {
            mavenLocal()
            if(project.hasProperty('nexusUser') && project.hasProperty('nexusPassword') &&
                    project.hasProperty('mavenSnapshotUrl') && project.hasProperty('mavenReleaseUrl')) {
                maven {
                    credentials {
                        username property('nexusUser')
                        password property('nexusPassword')
                    }
                    url project.version.endsWith('SNAPSHOT') ? property('mavenSnapshotUrl') : property('mavenReleaseUrl')
                }
            }
        }
    }

    def noJava = [':all']
    if(!noJava.any(project.path.&endsWith)) {
        // Configure common settings and dependencies for Java projects
        apply plugin: 'java-library'

        def defaultEncoding = 'UTF-8'
        [compileJava, compileTestJava]*.options*.encoding = defaultEncoding
        sourceCompatibility = 11
        targetCompatibility = 11

        jar.archiveBaseName = project.baseName

        dependencies {
            implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
            implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.1'
            implementation 'org.apache.logging.log4j:log4j-1.2-api:2.17.1'
            testImplementation ('junit:junit:4.13') {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
            testImplementation 'org.assertj:assertj-core:3.23.1'
            testImplementation 'org.hamcrest:hamcrest:2.2'
            testImplementation 'org.hamcrest:hamcrest-library:2.2'
            testImplementation 'org.mockito:mockito-core:3.6.0'
        }

        tasks.withType(Jar) {
            doFirst {
                manifest {
                    attributes( 'Specification-Title': baseName,
                    'Specification-Vendor': 'Bundesamt für Sicherheit in der Informationstechnik',
                    'Implementation-Title': baseName,
                    'Implementation-Vendor': 'Governikus GmbH &amp; Co. KG',
                    'Implementation-Version': project.version,
                    'Built-By': System.getProperty('user.name'),
                    'Build-Jdk': System.getProperty('java.version') )
                }
            }
        }

        // Configure tests
        apply plugin: 'jacoco'

        jacoco.toolVersion = '0.8.3'
        test {
            jacoco {
                destinationFile = file("$buildDir/jacoco/jacoco.exec")
            }
            exclude '**/*IT.class'
        }
        task integrationTest(type: Test) {
            jacoco {
                destinationFile = file("$buildDir/jacoco/jacoco-integration.exec")
            }
            include '**/*IT.class'
        }

        test.onlyIf { System.getProperty('skipTests') == null && System.getProperty('skipUnitTests') == null }
        integrationTest.onlyIf { System.getProperty('skipTests') == null && System.getProperty('skipIntegrationTests') == null }
        check.dependsOn integrationTest

        // Configure source code analysis plugins
        apply plugin: "com.github.spotbugs"
        apply plugin: 'checkstyle'
        apply plugin: 'pmd'

        spotbugs {
            toolVersion = '4.1.4'
            reportLevel = 'high'
            onlyAnalyze = [
                'de.bund.bsi.tr_esor.checktool.-' // '.-' is necessary to includes all subpackages
            ]
        }

        checkstyle {
            toolVersion = '8.2'
            ignoreFailures = true
            showViolations = false
        }
        checkstyleMain.source = 'src/main/java'

        pmd {
            toolVersion = '6.29.0'
            ignoreFailures = true
            ruleSets = [] // required; otherwise the default rule sets are applied to all sources additionally
            ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
        }
        tasks.withType(Checkstyle) {
            ignoreFailures = true
            reports {
                xml.required = true
                html.required = true
            }
        }
    }
}

task publishLocal { dependsOn ':commons:publishToMavenLocal', ':cli:publishToMavenLocal', ':war:publishToMavenLocal' }
