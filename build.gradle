description = 'ER-Prüftool des BSI'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.unbroken-dome.gradle-plugins:gradle-xjc-plugin:1.1.3'
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
  }
}

apply plugin: 'org.sonarqube'

allprojects {
  group = 'de.bund.bsi.tr_esor'
  version = "${version}"
  repositories {
    mavenCentral()
  }
  apply plugin: 'eclipse'

  // Sanitize eclipse project names for subprojects.
  def eclipseName = project == rootProject ? project.name : rootProject.name + '-' + project.path.substring(1).replaceAll(':', '-')
  eclipse {
    project {
      name = eclipseName
    }
  }
}

subprojects {
  ext.baseName = rootProject.name + '-' + project.name

  apply plugin: 'maven-publish'
  publishing {
    repositories {
      mavenLocal()
      if(project.hasProperty('nexusUser') && project.hasProperty('nexusPassword') &&
         project.hasProperty('mavenSnapshotUrl') && project.hasProperty('mavenReleaseUrl')) {
        maven {
          credentials {
            username property('nexusUser')
            password property('nexusPassword')
          }
          url project.version.endsWith('SNAPSHOT') ? property('mavenSnapshotUrl') : property('mavenReleaseUrl');
        }
      }
    }
  }

  def noJava = [':doc', ':all']
  if(!noJava.any(project.path.&endsWith)) {
    // Configure common settings and dependencies for Java projects
    apply plugin: 'java-library'

    def defaultEncoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.encoding = defaultEncoding
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar.baseName = project.baseName

    dependencies {
      compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'
      testCompile ('junit:junit:4.12') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
      }
      testCompile 'org.hamcrest:hamcrest-all:1.3'
      testCompile 'org.mockito:mockito-core:2.7.1'
    }

    tasks.withType(Jar) {
      doFirst {
        manifest {
          attributes( 'Specification-Title': baseName,
                      'Specification-Vendor': 'Bundesamt für Sicherheit in der Informationstechnik',
                      'Implementation-Title': baseName,
                      'Implementation-Vendor': 'Governikus GmbH &amp; Co. KG',
                      'Implementation-Version': project.version,
                      'Built-By': System.getProperty('user.name'),
                      'Build-Jdk': System.getProperty('java.version') )
        }
      }
    }

    // Configure tests
    apply plugin: 'jacoco'

    jacoco.toolVersion = '0.7.9'
    test {
      jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
      }
      exclude '**/*IT.class'
    }
    task integrationTest(type: Test) {
      dependsOn test
      jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco-integration.exec")
      }
      include '**/*IT.class'
    }
    tasks.withType(JacocoReport) {
      afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
          fileTree(dir: it, exclude: ['**/_1/*.class', 'ietf/**/*.class', 'iso/**/*.class', 'oasis/**/*.class', 'org/**/*.class'])
        })
      }
    }
    test.onlyIf { System.getProperty('skipTests') == null && System.getProperty('skipUnitTests') == null }
    integrationTest.onlyIf { System.getProperty('skipTests') == null && System.getProperty('skipIntegrationTests') == null }
    check.dependsOn integrationTest

    // Configure source code analysis plugins
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    tasks.withType(FindBugs){
      ignoreFailures = true
      reports {
        xml.enabled true
        html.enabled false
        excludeFilter = file("$rootProject.projectDir/findbugs-exclude.xml")
      }
    }
    checkstyle {
      toolVersion = '8.2'
      ignoreFailures = true
      showViolations = false
      configFile = file("$rootProject.projectDir/checkstyle_checks.xml")
    }
    checkstyleMain.source = 'src/main/java'
    pmd {
      toolVersion = '6.0.0'
      ignoreFailures = true
    }
    findbugs.toolVersion = '3.0.1'
    tasks.withType(Checkstyle) {
      reports {
        xml.enabled true
        html.enabled true
      }
    }
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', 'http://sonar.boskg.local'
  }
}